#Flood fill:
class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:
        r = len(image)
        c = len(image[0])
        
        visited = [False]*r
        for i in range(r):
            visited[i] = [False]*c
        
        def fill(i,j,source_value):
            if i<0 or i>=r or j<0 or j>=c:
                return
            
            curr_value = image[i][j]
            
            if curr_value == source_value and visited[i][j] == False:
                visited[i][j] = True
                fill(i+1,j,curr_value)
                fill(i-1,j,curr_value)
                fill(i,j+1,curr_value)
                fill(i,j-1,curr_value)
                image[i][j] = newColor
        
        fill(sr,sc,image[sr][sc])
        return image
        
  #No.of islands:
  class Solution {
    public int numIslands(char[][] grid) {
        int count_of_islands=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j]=='1'){
                    count_of_islands+=1;
                    bfs(grid,i,j);
                }
            }
        }
        return count_of_islands;
    }
    public void bfs(char grid[][],int i,int j){
        if(i<0||i>=grid.length||j<0||j>=grid[i].length||grid[i][j]=='0')
            return;
        grid[i][j]='0';
        bfs(grid,i+1,j);
        bfs(grid,i-1,j);
        bfs(grid,i,j-1);
        bfs(grid,i,j+1);
        
    }
}
